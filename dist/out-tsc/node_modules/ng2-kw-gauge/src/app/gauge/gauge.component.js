/**
 * @category   Component
 * @package    com.kiwity.ng2-kw-gauge.gauge
 * @author     Salvador Subarroca (subarroca@gmail.com)
**/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
// ANGULAR
import { Component, Input } from '@angular/core';
// EXTERNAL
import { Observable } from 'rxjs/Rx';
var GaugeComponent = (function () {
    function GaugeComponent() {
        this.bgRadius = 100;
        this.rounded = true;
        this.reverse = false;
        this.animationSecs = 0.5;
        this.segmentsLoaded = false;
        this.isIE11 = /Trident.*rv[ :]*11\./.test(navigator.userAgent);
    }
    Object.defineProperty(GaugeComponent.prototype, "segments", {
        set: function (segments) {
            var _this = this;
            this.segmentsLoaded = false;
            this.sortedSegments = this.sortSegments(segments);
            Observable.timer(0)
                .first()
                .subscribe(function () { return _this.segmentsLoaded = true; });
        },
        enumerable: true,
        configurable: true
    });
    GaugeComponent.prototype.ngOnInit = function () {
    };
    GaugeComponent.prototype.sortSegments = function (segments) {
        var _this = this;
        return segments && segments.sort(function (a, b) {
            if (_this.reverse) {
                return (a.value / a.goal > b.value / b.goal) ? 1 : -1;
            }
            else {
                return (a.value / a.goal > b.value / b.goal) ? -1 : 1;
            }
        });
    };
    return GaugeComponent;
}());
__decorate([
    Input(),
    __metadata("design:type", Number)
], GaugeComponent.prototype, "bgRadius", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], GaugeComponent.prototype, "bgColor", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], GaugeComponent.prototype, "rounded", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], GaugeComponent.prototype, "reverse", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], GaugeComponent.prototype, "animationSecs", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], GaugeComponent.prototype, "labels", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], GaugeComponent.prototype, "segments", null);
GaugeComponent = __decorate([
    Component({
        selector: 'ng2-kw-gauge',
        templateUrl: './gauge.component.html',
        styleUrls: ['./gauge.component.scss']
    }),
    __metadata("design:paramtypes", [])
], GaugeComponent);
export { GaugeComponent };
//# sourceMappingURL=/home/samuel/repos/glaucoma-australia/glaucoma-risk-calc-web-frontend/src/node_modules/ng2-kw-gauge/src/app/gauge/gauge.component.js.map