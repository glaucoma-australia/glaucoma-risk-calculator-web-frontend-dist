var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { WidgetLibraryService } from '../widgets/widget-library.service';
// No framework - unmodified controls, with styles from layout only
import { NoFrameworkComponent } from './no-framework.component';
// Material Design Framework (under construction)
// https://github.com/angular/material2
// https://www.muicss.com/docs/v1/css-js/forms
// http://materializecss.com/forms.html
import { MaterialDesignComponent } from './material-design/material-design.component';
import { MaterialAddReferenceComponent } from './material-design/material-add-reference.component';
import { MaterialButtonComponent } from './material-design/material-button.component';
import { MaterialCardComponent } from './material-design/material-card.component';
import { MaterialCheckboxComponent } from './material-design/material-checkbox.component';
import { MaterialCheckboxesComponent } from './material-design/material-checkboxes.component';
import { MaterialFileComponent } from './material-design/material-file.component';
import { MaterialInputComponent } from './material-design/material-input.component';
import { MaterialNumberComponent } from './material-design/material-number.component';
import { MaterialRadiosComponent } from './material-design/material-radios.component';
import { MaterialSelectComponent } from './material-design/material-select.component';
import { MaterialTabsComponent } from './material-design/material-tabs.component';
import { MaterialTextareaComponent } from './material-design/material-textarea.component';
// Bootstrap 3 Framework
// https://github.com/valor-software/ng2-bootstrap
import { Bootstrap3Component } from './bootstrap-3.component';
// Bootstrap 4 Framework (not started)
// https://github.com/ng-bootstrap/ng-bootstrap
// http://v4-alpha.getbootstrap.com/components/forms/
import { Bootstrap4Component } from './bootstrap-4.component';
// Foundation 6 Framework (not started)
// https://github.com/zurb/foundation-sites
import { Foundation6Component } from './foundation-6.component';
// Semantic UI Framework (not started)
// https://github.com/vladotesanovic/ngSemantic
import { SemanticUIComponent } from './semantic-ui.component';
var FrameworkLibraryService = (function () {
    function FrameworkLibraryService(widgetLibrary) {
        this.widgetLibrary = widgetLibrary;
        this.activeFramework = null;
        this.loadExternalAssets = false;
        this.defaultFramework = 'bootstrap-3';
        this.frameworkLibrary = {
            'no-framework': { framework: NoFrameworkComponent },
            'material-design': {
                framework: MaterialDesignComponent,
                widgets: {
                    '$ref': MaterialAddReferenceComponent,
                    'number': MaterialNumberComponent,
                    'text': MaterialInputComponent,
                    'file': MaterialFileComponent,
                    'checkbox': MaterialCheckboxComponent,
                    'submit': 'button',
                    'button': MaterialButtonComponent,
                    'select': MaterialSelectComponent,
                    'textarea': MaterialTextareaComponent,
                    'checkboxes': MaterialCheckboxesComponent,
                    'radios': MaterialRadiosComponent,
                    'card': MaterialCardComponent,
                    'tabs': MaterialTabsComponent,
                },
                stylesheets: [
                    '//fonts.googleapis.com/icon?family=Material+Icons',
                    '//fonts.googleapis.com/css?family=Roboto:300,400,500,700',
                    '//maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css',
                    // './node_modules/@angular/material/core/theming/prebuilt/deeppurple-amber.css',
                    './node_modules/@angular/material/core/theming/prebuilt/indigo-pink.css',
                ],
            },
            'bootstrap-3': {
                framework: Bootstrap3Component,
                stylesheets: [
                    '//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css',
                    '//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css',
                ],
                scripts: [
                    // '//code.jquery.com/jquery-2.1.1.min.js',
                    '//ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js',
                    // '//code.jquery.com/ui/1.12.1/jquery-ui.min.js',
                    '//ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js',
                    '//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js',
                ],
            },
            'bootstrap-4': { framework: Bootstrap4Component, },
            'foundation-6': { framework: Foundation6Component, },
            'smantic-ui': { framework: SemanticUIComponent, },
        };
    }
    FrameworkLibraryService.prototype.registerFrameworkWidgets = function (framework) {
        if (framework.hasOwnProperty('widgets')) {
            this.widgetLibrary.registerFrameworkWidgets(framework.widgets);
            return true;
        }
        this.widgetLibrary.unRegisterFrameworkWidgets();
        return false;
    };
    FrameworkLibraryService.prototype.unloadFrameworkExternalAssets = function () {
        for (var _i = 0, _a = (this.scripts || []).concat((this.stylesheets || [])); _i < _a.length; _i++) {
            var node = _a[_i];
            node.parentNode.removeChild(node);
        }
        this.scripts = [];
        this.stylesheets = [];
    };
    FrameworkLibraryService.prototype.loadFrameworkExternalAssets = function (framework) {
        this.unloadFrameworkExternalAssets();
        if (framework.hasOwnProperty('scripts')) {
            for (var _i = 0, _a = framework.scripts; _i < _a.length; _i++) {
                var script = _a[_i];
                var newScript = document.createElement('script');
                if (script.slice(0, 1) === '/' || script.slice(0, 2) === './'
                    || script.slice(0, 4) === 'http') {
                    newScript.src = script;
                }
                else {
                    newScript.innerHTML = script;
                }
                this.scripts.push(newScript);
                document.head.appendChild(newScript);
            }
        }
        if (framework.hasOwnProperty('stylesheets')) {
            for (var _b = 0, _c = framework.stylesheets; _b < _c.length; _b++) {
                var stylesheet = _c[_b];
                var newStylesheet = void 0;
                if (stylesheet.slice(0, 1) === '/' || stylesheet.slice(0, 2) === './'
                    || stylesheet.slice(0, 4) === 'http') {
                    newStylesheet = document.createElement('link');
                    newStylesheet.rel = 'stylesheet';
                    newStylesheet.href = stylesheet;
                }
                else {
                    newStylesheet = document.createElement('style');
                    newStylesheet.innerHTML = stylesheet;
                }
                this.stylesheets.push(newStylesheet);
                document.head.appendChild(newStylesheet);
            }
        }
        return !!(framework.stylesheets || framework.scripts);
    };
    FrameworkLibraryService.prototype.setLoadExternalAssets = function (loadExternalAssets) {
        if (loadExternalAssets === void 0) { loadExternalAssets = true; }
        this.loadExternalAssets = !!loadExternalAssets;
    };
    FrameworkLibraryService.prototype.setFramework = function (framework, loadExternalAssets) {
        if (loadExternalAssets === void 0) { loadExternalAssets = this.loadExternalAssets; }
        if (!framework)
            return false;
        var validNewFramework = false;
        if (!framework || framework === 'default') {
            this.activeFramework = this.frameworkLibrary[this.defaultFramework];
            validNewFramework = true;
        }
        else if (typeof framework === 'string' && this.hasFramework(framework)) {
            this.activeFramework = this.frameworkLibrary[framework];
            validNewFramework = true;
        }
        else if (typeof framework === 'object' && framework.hasOwnProperty('framework')) {
            this.activeFramework = framework;
            validNewFramework = true;
        }
        if (validNewFramework) {
            this.registerFrameworkWidgets(this.activeFramework);
            if (loadExternalAssets) {
                this.loadFrameworkExternalAssets(this.activeFramework);
            }
            else {
                this.unloadFrameworkExternalAssets();
            }
        }
        return validNewFramework;
    };
    FrameworkLibraryService.prototype.hasFramework = function (type) {
        if (!type || typeof type !== 'string')
            return false;
        return this.frameworkLibrary.hasOwnProperty(type);
    };
    FrameworkLibraryService.prototype.getFramework = function () {
        if (!this.activeFramework)
            this.setFramework('default', true);
        return this.activeFramework.framework;
    };
    FrameworkLibraryService.prototype.getFrameworkWidgets = function () {
        return this.activeFramework.widgets || {};
    };
    FrameworkLibraryService.prototype.getFrameworkStylesheets = function () {
        return this.activeFramework.stylesheets || [];
    };
    FrameworkLibraryService.prototype.getFrameworkScritps = function () {
        return this.activeFramework.scripts || [];
    };
    return FrameworkLibraryService;
}());
FrameworkLibraryService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [WidgetLibraryService])
], FrameworkLibraryService);
export { FrameworkLibraryService };
//# sourceMappingURL=/home/samuel/repos/glaucoma_risk_calculator/glaucoma-risk-calc-web-frontend/src/node_modules/angular2-json-schema-form/src/frameworks/framework-library.service.js.map