var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input } from '@angular/core';
import { JsonSchemaFormService } from '../../library/json-schema-form.service';
var MaterialTabsComponent = (function () {
    function MaterialTabsComponent(jsf) {
        this.jsf = jsf;
        this.selectedItem = 0;
        this.showAddTab = true;
    }
    MaterialTabsComponent.prototype.ngOnInit = function () {
        this.options = this.layoutNode.options;
        this.itemCount = this.layoutNode.items.length - 1;
        this.updateControl();
    };
    MaterialTabsComponent.prototype.select = function (index) {
        if (this.layoutNode.items[index].type === '$ref') {
            this.itemCount = this.layoutNode.items.length;
            this.jsf.addItem({
                formID: this.formID,
                layoutNode: this.layoutNode.items[index],
                layoutIndex: this.layoutIndex.concat(index),
                dataIndex: this.dataIndex.concat(index)
            });
            this.updateControl();
        }
        ;
        this.selectedItem = index;
    };
    MaterialTabsComponent.prototype.updateControl = function () {
        var lastItem = this.layoutNode.items[this.layoutNode.items.length - 1];
        if (lastItem.type === '$ref' &&
            this.itemCount >= (lastItem.options.maxItems || 1000000)) {
            this.showAddTab = false;
        }
    };
    MaterialTabsComponent.prototype.setTitle = function (item, index) {
        if (item === void 0) { item = null; }
        if (index === void 0) { index = null; }
        return this.jsf.setTitle(this, item, index);
    };
    return MaterialTabsComponent;
}());
__decorate([
    Input(),
    __metadata("design:type", Number)
], MaterialTabsComponent.prototype, "formID", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], MaterialTabsComponent.prototype, "layoutNode", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], MaterialTabsComponent.prototype, "layoutIndex", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], MaterialTabsComponent.prototype, "dataIndex", void 0);
MaterialTabsComponent = __decorate([
    Component({
        selector: 'material-tabs-widget',
        template: "\n    <nav md-tab-nav-bar\n      [attr.aria-label]=\"options?.label || options?.title\">\n        <a *ngFor=\"let item of layoutNode?.items; let i = index\"\n          md-tab-link\n          [active]=\"selectedItem === i\"\n          (click)=\"select(i)\">\n          <span *ngIf=\"showAddTab || item.type !== '$ref'\"\n            [innerHTML]=\"setTitle(item, i)\"></span>\n        </a>\n    </nav>\n\n    <div *ngFor=\"let layoutItem of layoutNode?.items; let i = index\"\n      [class]=\"options?.htmlClass\">\n\n      <select-framework-widget *ngIf=\"selectedItem === i\"\n        [class]=\"options?.fieldHtmlClass + ' ' + options?.activeClass + ' ' + options?.style?.selected\"\n        [dataIndex]=\"layoutNode?.dataType === 'array' ? (dataIndex || []).concat(i) : dataIndex\"\n        [layoutIndex]=\"(layoutIndex || []).concat(i)\"\n        [layoutNode]=\"layoutItem\"></select-framework-widget>\n\n    </div>",
        styles: ["a { cursor: pointer; }"],
    }),
    __metadata("design:paramtypes", [JsonSchemaFormService])
], MaterialTabsComponent);
export { MaterialTabsComponent };
//# sourceMappingURL=/home/samuel/repos/glaucoma_risk_calculator/glaucoma-risk-calc-web-frontend/src/node_modules/angular2-json-schema-form/src/frameworks/material-design/material-tabs.component.js.map