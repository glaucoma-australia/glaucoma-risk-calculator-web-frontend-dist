var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input } from '@angular/core';
var RootComponent = (function () {
    function RootComponent() {
    }
    RootComponent.prototype.trackByItem = function (layoutItem) { return layoutItem && layoutItem._id; };
    return RootComponent;
}());
__decorate([
    Input(),
    __metadata("design:type", Number)
], RootComponent.prototype, "formID", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], RootComponent.prototype, "dataIndex", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], RootComponent.prototype, "layoutIndex", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], RootComponent.prototype, "layout", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], RootComponent.prototype, "isOrderable", void 0);
RootComponent = __decorate([
    Component({
        selector: 'root-widget',
        template: "\n    <div *ngFor=\"let layoutItem of layout; let i = index\"\n      [dataIndex]=\"layoutItem?.arrayItem ? (dataIndex || []).concat(i) : (dataIndex || [])\"\n      [layoutIndex]=\"(layoutIndex || []).concat(i)\"\n      [layoutNode]=\"layoutItem\"\n      [orderable]=\"isOrderable !== false && layoutItem?.type !== '$ref' &&\n        layoutItem?.arrayItem && layoutItem?.options?.arrayItemType === 'list'\">\n      <!-- && (layout[layout.length - 1].tupleItems || 0 < (layout.length - 2)) -->\n\n      <select-framework-widget\n        [formID]=\"formID\"\n        [dataIndex]=\"layoutItem?.arrayItem ? (dataIndex || []).concat(i) : (dataIndex || [])\"\n        [layoutIndex]=\"(layoutIndex || []).concat(i)\"\n        [layoutNode]=\"layoutItem\"></select-framework-widget>\n\n    </div>",
        styles: ["\n    [draggable=true] { cursor: move; }\n    [draggable=true]:hover { box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n      position: relative; z-index: 10; }\n    [draggable=true].drag-target-top { box-shadow: 0 -2px 0 #000;\n      position: relative; z-index: 20; }\n    [draggable=true].drag-target-bottom { box-shadow: 0 2px 0 #000;\n      position: relative; z-index: 20; }\n  "],
    })
], RootComponent);
export { RootComponent };
//# sourceMappingURL=/home/samuel/repos/glaucoma_risk_calculator/glaucoma-risk-calc-web-frontend/src/node_modules/angular2-json-schema-form/src/widgets/root.component.js.map