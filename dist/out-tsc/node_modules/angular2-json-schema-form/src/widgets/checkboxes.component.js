var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input } from '@angular/core';
import { JsonSchemaFormService } from '../library/json-schema-form.service';
import { buildTitleMap } from '../library/utilities/index';
var CheckboxesComponent = (function () {
    function CheckboxesComponent(jsf) {
        this.jsf = jsf;
        this.boundControl = false;
        this.checkboxList = [];
    }
    CheckboxesComponent.prototype.ngOnInit = function () {
        this.options = this.layoutNode.options;
        this.layoutOrientation = (this.layoutNode.type === 'checkboxes-inline' ||
            this.layoutNode.type === 'checkboxbuttons') ? 'horizontal' : 'vertical';
        this.jsf.initializeControl(this);
        this.checkboxList = buildTitleMap(this.options.titleMap || this.options.enumNames, this.options.enum, true);
        if (this.boundControl) {
            var formArray = this.jsf.getControl(this);
            for (var _i = 0, _a = this.checkboxList; _i < _a.length; _i++) {
                var checkboxItem = _a[_i];
                checkboxItem.checked = formArray.value.indexOf(checkboxItem.value) !== -1;
            }
        }
    };
    CheckboxesComponent.prototype.updateValue = function (event) {
        for (var _i = 0, _a = this.checkboxList; _i < _a.length; _i++) {
            var checkboxItem = _a[_i];
            if (event.target.value === checkboxItem.value) {
                checkboxItem.checked = event.target.checked;
            }
        }
        if (this.boundControl) {
            this.jsf.updateArrayCheckboxList(this, this.checkboxList);
        }
    };
    return CheckboxesComponent;
}());
__decorate([
    Input(),
    __metadata("design:type", Number)
], CheckboxesComponent.prototype, "formID", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], CheckboxesComponent.prototype, "layoutNode", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], CheckboxesComponent.prototype, "layoutIndex", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], CheckboxesComponent.prototype, "dataIndex", void 0);
CheckboxesComponent = __decorate([
    Component({
        selector: 'checkboxes-widget',
        template: "\n    <label *ngIf=\"options?.title\"\n      [class]=\"options?.labelHtmlClass\"\n      [class.sr-only]=\"options?.notitle\"\n      [innerHTML]=\"options?.title\"></label>\n    <div [ngSwitch]=\"layoutOrientation\">\n\n      <!-- 'horizontal' = checkboxes-inline or checkboxbuttons -->\n      <div *ngSwitchCase=\"'horizontal'\"\n        [class]=\"options?.htmlClass\">\n        <label *ngFor=\"let checkboxItem of checkboxList\"\n          [attr.for]=\"'control' + layoutNode?._id + '/' + checkboxItem.value\"\n          [class]=\"options?.itemLabelHtmlClass + (checkboxItem.checked ?\n            (' ' + options?.activeClass + ' ' + options?.style?.selected) :\n            (' ' + options?.style?.unselected))\">\n          <input type=\"checkbox\"\n            [attr.required]=\"options?.required\"\n            [checked]=\"checkboxItem.checked\"\n            [class]=\"options?.fieldHtmlClass\"\n            [disabled]=\"controlDisabled\"\n            [id]=\"'control' + layoutNode?._id + '/' + checkboxItem.value\"\n            [name]=\"formControlName\"\n            [readonly]=\"options?.readonly ? 'readonly' : null\"\n            [value]=\"checkboxItem.value\"\n            (change)=\"updateValue($event)\">\n          <span [innerHTML]=\"checkboxItem.name\"></span>\n        </label>\n      </div>\n\n      <!-- 'vertical' = regular checkboxes -->\n      <div *ngSwitchDefault>\n        <div *ngFor=\"let checkboxItem of checkboxList\"\n          [class]=\"options?.htmlClass\">\n          <label\n            [attr.for]=\"'control' + layoutNode?._id + '/' + checkboxItem.value\"\n            [class]=\"options?.itemLabelHtmlClass + (checkboxItem.checked ?\n              (' ' + options?.activeClass + ' ' + options?.style?.selected) :\n              (' ' + options?.style?.unselected))\">\n            <input type=\"checkbox\"\n              [attr.required]=\"options?.required\"\n              [checked]=\"checkboxItem.checked\"\n              [class]=\"options?.fieldHtmlClass\"\n              [disabled]=\"controlDisabled\"\n              [id]=\"options?.name + '/' + checkboxItem.value\"\n              [name]=\"options?.name\"\n              [readonly]=\"options?.readonly ? 'readonly' : null\"\n              [value]=\"checkboxItem.value\"\n              (change)=\"updateValue($event)\">\n            <span [innerHTML]=\"checkboxItem?.name\"></span>\n          </label>\n        </div>\n      </div>\n\n    </div>",
    }),
    __metadata("design:paramtypes", [JsonSchemaFormService])
], CheckboxesComponent);
export { CheckboxesComponent };
//# sourceMappingURL=/home/samuel/repos/glaucoma_risk_calculator/glaucoma-risk-calc-web-frontend/src/node_modules/angular2-json-schema-form/src/widgets/checkboxes.component.js.map