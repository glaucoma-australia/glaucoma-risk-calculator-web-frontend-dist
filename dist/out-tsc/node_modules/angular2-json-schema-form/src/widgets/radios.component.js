var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input } from '@angular/core';
import { JsonSchemaFormService } from '../library/json-schema-form.service';
import { buildTitleMap } from '../library/utilities/index';
var RadiosComponent = (function () {
    function RadiosComponent(jsf) {
        this.jsf = jsf;
        this.controlDisabled = false;
        this.boundControl = false;
        this.layoutOrientation = 'vertical';
        this.radiosList = [];
    }
    RadiosComponent.prototype.ngOnInit = function () {
        this.options = this.layoutNode.options;
        if (this.layoutNode.type === 'radios-inline' ||
            this.layoutNode.type === 'radiobuttons') {
            this.layoutOrientation = 'horizontal';
        }
        this.radiosList = buildTitleMap(this.options.titleMap || this.options.enumNames, this.options.enum, true);
        this.jsf.initializeControl(this);
    };
    RadiosComponent.prototype.updateValue = function (event) {
        this.jsf.updateValue(this, event.target.value);
    };
    return RadiosComponent;
}());
__decorate([
    Input(),
    __metadata("design:type", Number)
], RadiosComponent.prototype, "formID", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], RadiosComponent.prototype, "layoutNode", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], RadiosComponent.prototype, "layoutIndex", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], RadiosComponent.prototype, "dataIndex", void 0);
RadiosComponent = __decorate([
    Component({
        selector: 'radios-widget',
        template: "\n    <label *ngIf=\"options?.title\"\n      [attr.for]=\"'control' + layoutNode?._id\"\n      [class]=\"options?.labelHtmlClass\"\n      [class.sr-only]=\"options?.notitle\"\n      [innerHTML]=\"options?.title\"></label>\n      <div [ngSwitch]=\"layoutOrientation\">\n\n        <!-- 'horizontal' = radios-inline or radiobuttons -->\n        <div *ngSwitchCase=\"'horizontal'\"\n          [class]=\"options?.htmlClass\">\n          <label *ngFor=\"let radioItem of radiosList\"\n            [attr.for]=\"'control' + layoutNode?._id + '/' + radioItem?.value\"\n            [class]=\"options?.itemLabelHtmlClass +\n              ((controlValue + '' === radioItem?.value + '') ?\n              (' ' + options?.activeClass + ' ' + options?.style?.selected) :\n              (' ' + options?.style?.unselected))\">\n            <input type=\"radio\"\n              [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n              [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n              [attr.required]=\"options?.required\"\n              [checked]=\"radioItem?.value === controlValue\"\n              [class]=\"options?.fieldHtmlClass\"\n              [disabled]=\"controlDisabled\"\n              [id]=\"'control' + layoutNode?._id + '/' + radioItem?.value\"\n              [name]=\"controlName\"\n              [value]=\"radioItem?.value\"\n              (change)=\"updateValue($event)\">\n            <span [innerHTML]=\"radioItem?.name\"></span>\n          </label>\n        </div>\n\n        <!-- 'vertical' = regular radios -->\n        <div *ngSwitchDefault>\n          <div *ngFor=\"let radioItem of radiosList\"\n            [class]=\"options?.htmlClass\">\n            <label\n              [attr.for]=\"'control' + layoutNode?._id + '/' + radioItem?.value\"\n              [class]=\"options?.itemLabelHtmlClass +\n                ((controlValue + '' === radioItem?.value + '') ?\n                (' ' + options?.activeClass + ' ' + options?.style?.selected) :\n                (' ' + options?.style?.unselected))\">\n              <input type=\"radio\"\n                [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                [attr.required]=\"options?.required\"\n                [checked]=\"radioItem?.value === controlValue\"\n                [class]=\"options?.fieldHtmlClass\"\n                [disabled]=\"controlDisabled\"\n                [id]=\"'control' + layoutNode?._id + '/' + radioItem?.value\"\n                [name]=\"controlName\"\n                [value]=\"radioItem?.value\"\n                (change)=\"updateValue($event)\">\n              <span [innerHTML]=\"radioItem?.name\"></span>\n            </label>\n          </div>\n        </div>\n\n      </div>",
    }),
    __metadata("design:paramtypes", [JsonSchemaFormService])
], RadiosComponent);
export { RadiosComponent };
//# sourceMappingURL=/home/samuel/repos/glaucoma_risk_calculator/glaucoma-risk-calc-web-frontend/src/node_modules/angular2-json-schema-form/src/widgets/radios.component.js.map