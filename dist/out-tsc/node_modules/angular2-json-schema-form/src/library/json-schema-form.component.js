var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import * as _ from 'lodash';
import { FrameworkLibraryService } from '../frameworks/framework-library.service';
import { WidgetLibraryService } from '../widgets/widget-library.service';
import { JsonSchemaFormService } from './json-schema-form.service';
import { hasOwn, hasValue, isArray, isEmpty, isObject, JsonPointer } from './utilities/index';
/**
 * @module 'JsonSchemaFormComponent' - Angular 2 JSON Schema Form
 *
 * Root module of the Angular 2 JSON Schema Form client-side library,
 * an Angular 2 library which generates an HTML form from a JSON schema
 * structured data model and/or a JSON Schema Form layout description.
 *
 * This library also validates input data by the user, both using individual
 * validators which provide real-time feedback while the user is filling out
 * the form, and then using the entire schema when the form is submitted,
 * to make sure the returned JSON data object is valid.
 *
 * This library is similar to, and mostly API compatible with:
 *
 * - JSON Schema Form's Angular Schema Form library for AngularJs
 *   http://schemaform.io
 *   http://schemaform.io/examples/bootstrap-example.html (examples)
 *
 * - Joshfire's JSON Form library for jQuery
 *   https://github.com/joshfire/jsonform
 *   http://ulion.github.io/jsonform/playground (examples)
 *
 * - Mozilla's react-jsonschema-form library for React
 *   https://github.com/mozilla-services/react-jsonschema-form
 *   https://mozilla-services.github.io/react-jsonschema-form (examples)
 *
 * This library depends on:
 *  - Angular 2 (obviously)                https://angular.io
 *  - lodash, JavaScript utility library   https://github.com/lodash/lodash
 *  - ajv, Another JSON Schema validator   https://github.com/epoberezkin/ajv
 * In addition, the testing playground also depends on:
 *  - brace, Browserified Ace editor       http://thlorenz.github.io/brace
 */
var JsonSchemaFormComponent = (function () {
    function JsonSchemaFormComponent(frameworkLibrary, widgetLibrary, jsf) {
        this.frameworkLibrary = frameworkLibrary;
        this.widgetLibrary = widgetLibrary;
        this.jsf = jsf;
        this.formValueSubscription = null;
        // Outputs
        this.onChanges = new EventEmitter(); // Live unvalidated internal form data
        this.onSubmit = new EventEmitter(); // Complete validated form data
        this.isValid = new EventEmitter(); // Is current data valid?
        this.validationErrors = new EventEmitter(); // Validation errors (if any)
        this.formSchema = new EventEmitter(); // Final schema used to create form
        this.formLayout = new EventEmitter(); // Final layout used to create form
    }
    JsonSchemaFormComponent.prototype.ngOnInit = function () {
        this.initializeForm();
    };
    JsonSchemaFormComponent.prototype.ngOnChanges = function () {
        this.initializeForm();
    };
    /**
     * 'initializeForm' function
     *
     * - Update 'schema', 'layout', and 'initialValues', from inputs.
     *
     * - Create 'dataMap' to map the data to the schema and template.
     *
     * - Create 'schemaRefLibrary' to resolve schema $ref links.
     *
     * - Create 'layoutRefLibrary' to use when dynamically adding
     *   form components to arrays and recursive $ref points.
     *
     * - Create 'formGroupTemplate', then from it 'formGroup',
     *   the Angular 2 formGroup used to control the reactive form.
     *
     * @return {void}
     */
    JsonSchemaFormComponent.prototype.initializeForm = function () {
        var _this = this;
        if (this.schema || this.layout || this.data ||
            this.form || this.JSONSchema || this.UISchema) {
            // Reset all form values to defaults
            this.jsf.resetAllValues();
            // Initialize 'options' (global form options) and set framework
            // Combine available inputs:
            // 1. options - recommended
            // 2. form.options - Single input style
            this.jsf.setOptions({ debug: !!this.debug });
            var loadExternalAssets = this.loadExternalAssets || false;
            var framework = this.framework || 'default';
            if (isObject(this.options)) {
                this.jsf.setOptions(this.options);
                loadExternalAssets = this.options.loadExternalAssets || loadExternalAssets;
                framework = this.options.framework || framework;
            }
            if (isObject(this.form) && isObject(this.form.options)) {
                this.jsf.setOptions(this.form.options);
                loadExternalAssets = this.form.options.loadExternalAssets || loadExternalAssets;
                framework = this.form.options.framework || framework;
            }
            if (isObject(this.widgets)) {
                this.jsf.setOptions({ widgets: this.widgets });
            }
            this.frameworkLibrary.setLoadExternalAssets(loadExternalAssets);
            this.frameworkLibrary.setFramework(framework);
            this.jsf.framework = this.frameworkLibrary.getFramework();
            if (isObject(this.jsf.globalOptions.widgets)) {
                for (var _i = 0, _a = Object.keys(this.jsf.globalOptions.widgets); _i < _a.length; _i++) {
                    var widget = _a[_i];
                    this.widgetLibrary.registerWidget(widget, this.jsf.globalOptions.widgets[widget]);
                }
            }
            if (isObject(this.form) && isObject(this.form.tpldata)) {
                this.jsf.setTpldata(this.form.tpldata);
            }
            // Initialize 'schema'
            // Use first available input:
            // 1. schema - recommended / Angular Schema Form style
            // 2. form.schema - Single input / JSON Form style
            // 3. JSONSchema - React JSON Schema Form style
            // 4. form.JSONSchema - For testing single input React JSON Schema Forms
            // 5. form - For testing single schema-only inputs
            // TODO: 6. (none) no schema - construct form entirely from layout instead
            if (isObject(this.schema)) {
                this.jsf.AngularSchemaFormCompatibility = true;
                this.jsf.schema = _.cloneDeep(this.schema);
            }
            else if (hasOwn(this.form, 'schema') && isObject(this.form.schema)) {
                this.jsf.schema = _.cloneDeep(this.form.schema);
            }
            else if (isObject(this.JSONSchema)) {
                this.jsf.ReactJsonSchemaFormCompatibility = true;
                this.jsf.schema = _.cloneDeep(this.JSONSchema);
            }
            else if (hasOwn(this.form, 'JSONSchema') && isObject(this.form.JSONSchema)) {
                this.jsf.ReactJsonSchemaFormCompatibility = true;
                this.jsf.schema = _.cloneDeep(this.form.JSONSchema);
            }
            else if (hasOwn(this.form, 'properties') && isObject(this.form.properties)) {
                this.jsf.schema = _.cloneDeep(this.form);
            }
            if (!isEmpty(this.jsf.schema)) {
                // Allow for JSON schema shorthand (JSON Form style)
                if (!hasOwn(this.jsf.schema, 'type') &&
                    hasOwn(this.jsf.schema, 'properties') &&
                    isObject(this.jsf.schema.properties)) {
                    this.jsf.schema.type = 'object';
                }
                else if (!hasOwn(this.jsf.schema, 'type') ||
                    this.jsf.schema.type !== 'object' ||
                    !hasOwn(this.jsf.schema, 'properties')) {
                    this.jsf.JsonFormCompatibility = true;
                    this.jsf.schema = {
                        'type': 'object', 'properties': this.jsf.schema
                    };
                }
                // If JSON Schema is version 3 (JSON Form style), convert it to version 4
                this.jsf.convertJsonSchema3to4();
                // Initialize ajv and compile schema
                this.jsf.compileAjvSchema();
                // Resolve all schema $ref links
                this.jsf.resolveSchemaRefLinks();
            }
            // Initialize 'layout'
            // Use first available array input:
            // 1. layout - recommended
            // 2. form - Angular Schema Form style
            // 3. form.form - JSON Form style
            // 4. form.layout - Single input style
            // 5. (none) no input - use default layout instead
            if (isArray(this.layout)) {
                this.jsf.layout = _.cloneDeep(this.layout);
            }
            else if (isArray(this.form)) {
                this.jsf.AngularSchemaFormCompatibility = true;
                this.jsf.layout = _.cloneDeep(this.form);
            }
            else if (this.form && isArray(this.form.form)) {
                this.jsf.JsonFormCompatibility = true;
                this.jsf.layout =
                    this.jsf.fixJsonFormOptions(_.cloneDeep(this.form.form));
            }
            else if (this.form && isArray(this.form.layout)) {
                this.jsf.layout = _.cloneDeep(this.form.layout);
            }
            else {
                this.jsf.layout =
                    this.jsf.globalOptions.addSubmit === false ?
                        ['*'] :
                        ['*', { type: 'submit', title: 'Submit' }];
            }
            // Import alternate layout formats 'UISchema' or 'customFormItems'
            // used for React JSON Schema Form and JSON Form API compatibility
            // Use first available input:
            // 1. UISchema - React JSON Schema Form style
            // 2. form.UISchema - For testing single input React JSON Schema Forms
            // 2. form.customFormItems - JSON Form style
            // 3. (none) no input - don't import
            var alternateLayout = null;
            if (isObject(this.UISchema)) {
                this.jsf.ReactJsonSchemaFormCompatibility = true;
                alternateLayout = _.cloneDeep(this.UISchema);
            }
            else if (hasOwn(this.form, 'UISchema')) {
                this.jsf.ReactJsonSchemaFormCompatibility = true;
                alternateLayout = _.cloneDeep(this.form.UISchema);
            }
            else if (hasOwn(this.form, 'customFormItems')) {
                this.jsf.JsonFormCompatibility = true;
                alternateLayout =
                    this.jsf.fixJsonFormOptions(_.cloneDeep(this.form.customFormItems));
            }
            // if alternate layout found, copy options into schema
            if (alternateLayout) {
                JsonPointer.forEachDeep(alternateLayout, function (value, pointer) {
                    var schemaPointer = pointer.replace(/\//g, '/properties/')
                        .replace(/\/properties\/items\/properties\//g, '/items/properties/')
                        .replace(/\/properties\/titleMap\/properties\//g, '/titleMap/properties/');
                    if (hasValue(value) && hasValue(pointer)) {
                        var groupPointer = JsonPointer.parse(schemaPointer).slice(0, -2);
                        var key = JsonPointer.toKey(schemaPointer);
                        var itemPointer = void 0;
                        // If 'ui:order' object found, copy into schema root
                        if (key === 'ui:order') {
                            itemPointer = schemaPointer;
                        }
                        else {
                            itemPointer = groupPointer.concat(['x-schema-form',
                                key.slice(0, 3) === 'ui:' ? key.slice(3) : key
                            ]);
                        }
                        if (JsonPointer.has(_this.jsf.schema, groupPointer) &&
                            !JsonPointer.has(_this.jsf.schema, itemPointer)) {
                            JsonPointer.set(_this.jsf.schema, itemPointer, value);
                        }
                    }
                });
            }
            // Initialize 'initialValues'
            // Use first available input:
            // 1. data - recommended
            // 2. model - Angular Schema Form style
            // 3. form.value - JSON Form style
            // 4. form.data - Single input style
            // 5. formData - React JSON Schema Form style
            // 6. form.formData - For easier testing of React JSON Schema Forms
            // 7. (none) no data - initialize data from schema and layout defaults only
            if (isObject(this.data)) {
                this.jsf.initialValues = _.cloneDeep(this.data);
            }
            else if (isObject(this.model)) {
                this.jsf.AngularSchemaFormCompatibility = true;
                this.jsf.initialValues = _.cloneDeep(this.model);
            }
            else if (isObject(this.form) && isObject(this.form.value)) {
                this.jsf.JsonFormCompatibility = true;
                this.jsf.initialValues = _.cloneDeep(this.form.value);
            }
            else if (isObject(this.form) && isObject(this.form.data)) {
                this.jsf.initialValues = _.cloneDeep(this.form.data);
            }
            else if (isObject(this.formData)) {
                this.jsf.ReactJsonSchemaFormCompatibility = true;
                this.jsf.initialValues = _.cloneDeep(this.formData);
            }
            else if (hasOwn(this.form, 'formData') && isObject(this.form.formData)) {
                this.jsf.ReactJsonSchemaFormCompatibility = true;
                this.jsf.initialValues = _.cloneDeep(this.form.formData);
            }
            if (isEmpty(this.jsf.schema)) {
                // TODO: If layout, but no schema, build schema from layout
                if (this.jsf.layout.indexOf('*') === -1) {
                    this.jsf.buildSchemaFromLayout();
                }
                else if (!isEmpty(this.jsf.initialValues)) {
                    this.jsf.buildSchemaFromData();
                }
            }
            if (!isEmpty(this.jsf.schema)) {
                // If not already initialized, initialize ajv and compile schema
                this.jsf.compileAjvSchema();
                // Build the Angular 2 FormGroup template from the schema
                this.jsf.buildFormGroupTemplate();
                // Update all layout elements, add values, widgets, and validators,
                // replace any '*' with a layout built from all schema elements,
                // and update the FormGroup template with any new validators
                this.jsf.buildLayout(this.widgetLibrary);
                // Build the real Angular 2 FormGroup from the FormGroup template
                this.jsf.buildFormGroup();
            }
            if (this.jsf.formGroup) {
                // // Calculate references to other fields
                // if (!isEmpty(this.jsf.formGroup.value)) {
                //   forEach(this.jsf.formGroup.value, (value, key, object, rootObject) => {
                //     if (typeof value === 'string') {
                //       object[key] = this.jsf.parseText(value, value, rootObject, key);
                //     }
                //   }, 'top-down');
                // }
                // // TODO: Figure out how to display calculated values without changing object data
                // // See http://ulion.github.io/jsonform/playground/?example=templating-values
                // TODO: (re-)render the form
                // Subscribe to form changes to output live data, validation, and errors
                this.jsf.dataChanges.subscribe(function (data) { return _this.onChanges.emit(data); });
                this.jsf.isValidChanges.subscribe(function (isValid) { return _this.isValid.emit(isValid); });
                this.jsf.validationErrorChanges.subscribe(function (errors) { return _this.validationErrors.emit(errors); });
                // Output final schema, final layout, and initial data
                this.formSchema.emit(this.jsf.schema);
                this.formLayout.emit(this.jsf.layout);
                this.onChanges.emit(this.jsf.data);
                // If 'validateOnRender' = true, output initial validation and any errors
                if (JsonPointer.get(this.jsf, '/globalOptions/validateOnRender')) {
                    this.isValid.emit(this.jsf.isValid);
                    this.validationErrors.emit(this.jsf.validationErrors);
                }
            }
            else {
            }
        }
    };
    // Uncomment individual lines to output debugging information to browser:
    // (These only work if the 'debug' option has also been set to 'true'.)
    JsonSchemaFormComponent.prototype.ngDoCheck = function () {
        if (this.debug || this.jsf.globalOptions.debug) {
            var vars = [];
            // vars.push(this.jsf.schema);
            // vars.push(this.jsf.layout);
            // vars.push(this.jsf.initialValues);
            // vars.push(this.jsf.formGroup.value);
            // vars.push(this.jsf.formGroupTemplate);
            // vars.push(this.jsf.formGroup);
            // vars.push(this.jsf.schemaRefLibrary);
            // vars.push(this.jsf.layoutRefLibrary);
            // vars.push(this.jsf.templateRefLibrary);
            // vars.push(this.jsf.dataMap);
            // vars.push(this.jsf.arrayMap);
            // vars.push(this.jsf.schemaRecursiveRefMap);
            // vars.push(this.jsf.dataRecursiveRefMap);
            this.debugOutput = vars.map(function (v) { return JSON.stringify(v, null, 2); }).join('\n');
        }
    };
    JsonSchemaFormComponent.prototype.submitForm = function () {
        this.onSubmit.emit(this.jsf.validData);
    };
    return JsonSchemaFormComponent;
}());
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonSchemaFormComponent.prototype, "schema", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], JsonSchemaFormComponent.prototype, "layout", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonSchemaFormComponent.prototype, "data", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonSchemaFormComponent.prototype, "options", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], JsonSchemaFormComponent.prototype, "framework", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], JsonSchemaFormComponent.prototype, "widgets", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonSchemaFormComponent.prototype, "form", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonSchemaFormComponent.prototype, "model", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonSchemaFormComponent.prototype, "JSONSchema", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonSchemaFormComponent.prototype, "UISchema", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonSchemaFormComponent.prototype, "formData", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], JsonSchemaFormComponent.prototype, "loadExternalAssets", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], JsonSchemaFormComponent.prototype, "debug", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], JsonSchemaFormComponent.prototype, "onChanges", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], JsonSchemaFormComponent.prototype, "onSubmit", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], JsonSchemaFormComponent.prototype, "isValid", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], JsonSchemaFormComponent.prototype, "validationErrors", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], JsonSchemaFormComponent.prototype, "formSchema", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], JsonSchemaFormComponent.prototype, "formLayout", void 0);
JsonSchemaFormComponent = __decorate([
    Component({
        selector: 'json-schema-form',
        template: "\n    <form (ngSubmit)=\"submitForm()\">\n      <root-widget [formID]=\"formID\" [layout]=\"jsf.layout\"></root-widget>\n    </form>\n    <div *ngIf=\"debug || jsf.globalOptions.debug\">\n      Debug output: <pre>{{debugOutput}}</pre>\n    </div>",
        providers: [JsonSchemaFormService],
        changeDetection: ChangeDetectionStrategy.OnPush,
    }),
    __metadata("design:paramtypes", [FrameworkLibraryService,
        WidgetLibraryService,
        JsonSchemaFormService])
], JsonSchemaFormComponent);
export { JsonSchemaFormComponent };
//# sourceMappingURL=/home/samuel/repos/glaucoma_risk_calculator/glaucoma-risk-calc-web-frontend/src/node_modules/angular2-json-schema-form/src/library/json-schema-form.component.js.map